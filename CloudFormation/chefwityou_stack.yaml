Parameters:
  LambdaBucket:
    Type: String
    Description: Bucket holding Lambda function zip file

  RepositoryURL:
    Type: String
    Description: The URL of the Amplify repository
  
  ConvertedBucketName:
    Type: String
    Description: The name of the converted S3 bucket
  
  DBNAME:
    Type: String
    Description: Database name

  DBHOSTNAME:
    Type: String
    Description: RDS Hostname

  DBCRED:
    Type: String
    Description: RDS Password

  DBUSER:
    Type: String
    Description: RDS Username

  DBPORT:
    Type: String
    Description: RDS Port


Resources:
  # creating IAM roles
  AmplifyAccessIAM:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: chefwithyou-amplify-access-github-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser  

  ConvertIAM:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: chefwithyou-lambda-function-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
    
  UploadIAM:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: chefwithyou-upload-s3-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess  


  # creating cognito user pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: chefwithyou-userpool
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
      AutoVerifiedAttributes: 
        - email
      EmailConfiguration: 
        EmailSendingAccount: COGNITO_DEFAULT
      Policies: 
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema: 
        - Name: email
          Required: true
          AttributeDataType: String
        - Name: phone_number
          AttributeDataType: String
        - Name: birthdate
          AttributeDataType: String
          StringAttributeConstraints:
            MinLength: 10
            MaxLength: 10
      UsernameAttributes: 
        - email
      UsernameConfiguration: 
        CaseSensitive: false    
    
  # creating app client
  CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties: 
        UserPoolId: !Ref CognitoUserPool
        ClientName: chefwithyou-client
        AllowedOAuthFlows: 
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes: 
          - openid
        CallbackURLs: 
          - https://example.com/callback
        ExplicitAuthFlows: 
          - ALLOW_USER_SRP_AUTH 
          - ALLOW_REFRESH_TOKEN_AUTH 
          - ALLOW_USER_PASSWORD_AUTH 
        GenerateSecret: false
        LogoutURLs: 
          - https://example.com/logout
        SupportedIdentityProviders: 
          - COGNITO  

  # creating domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: chefwithyou
      UserPoolId: !Ref CognitoUserPool  


  # creating lambdas
  ConvertLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref LambdaBucket
        S3Key: readFromDB.zip
      Environment: 
        Variables:
          RDS_DATABASE: !Ref DBNAME
          RDS_HOSTNAME: !Ref DBHOSTNAME
          RDS_PASSWORD: !Ref DBCRED
          RDS_USERNAME: !Ref DBUSER
          RDS_PORT: !Ref DBPORT
      FunctionName: readFromDB
      Handler: index.handler
      MemorySize: 3000
      Role: !GetAtt ConvertIAM.Arn
      Runtime: nodejs16.x
      Timeout: 30
      TracingConfig: 
        Mode: PassThrough      
  
    

  # creating API Gateway
Resources:

  MyAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ChefWithYouAPI

  MyResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
        ParentId: !GetAtt MyAPI.RootResourceId
        PathPart: mypath
        RestApiId: !Ref MyAPI

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref MyResource
      RestApiId: !Ref MyAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170180227568:function:readFromDB/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  PutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      ResourceId: !Ref MyResource
      RestApiId: !Ref MyAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170180227568:function:writetoDB/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false


  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: Chef-With-You
      Repository: https://github.com/4620-2023-Group4/Chef-With-You
      Platform: WEB
      CustomRules:
        - Source: "/<*>"
          Status: 404-200
          Target: "/index.html"
        - Source: "</^[^.]+$|\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>"
          Status: 200
          Target: "/index.html"
      EnvironmentVariables:
        - Name: AMPLIFY_DIFF_DEPLOY
          Value: 'false'
        - Name: AMPLIFY_MONOREPO_APP_ROOT
          Value: 'ui'
      EnableBranchAutoDeletion: false
      BuildSpec: |
        version: 1
        applications:
          - frontend:
              phases:
                preBuild:
                  commands:
                    - npm ci
                build:
                  commands:
                    - npm run build
              artifacts:
                baseDirectory: dist/ui
                files:
                  - '**/*'
              cache:
                paths:
                  - node_modules/**/*

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: master
      EnableAutoBuild: true
      Framework: Angular
      EnableBasicAuth: false
      Stage: PRODUCTION



